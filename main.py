import re, os, json, asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ChatPermissions

# ---------------- –ö–æ–Ω—Ñ–∏–≥ ----------------
BOT_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê"   # –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω
OWNER_ID = 7322925570          # —Ç–≤–æ–π Telegram ID
DATA_FILE = "data.json"

DEFAULTS = {
    "banned_words": [],
    "allowed_links": [],
    "enabled": True,
    "mode": "admins",   # all / admins
    "bot_admins": [],
    "warn_message": "üö´ **{user} –Ω–∞–ø–∏—Å–∞–ª {reason} –∏ –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.**",
    "mute_message": "üö´ **{user} –Ω–∞–ø–∏—Å–∞–ª {reason} –∏ –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ {time}.**",
    "ban_message": "üö´ **{user} –Ω–∞–ø–∏—Å–∞–ª {reason} –∏ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.**",
    "action_words": "warn",
    "action_links": "mute",
    "mute_seconds_words": 300,
    "mute_seconds_links": 600
}

def load_data():
    if not os.path.exists(DATA_FILE): return {}
    return json.load(open(DATA_FILE, "r", encoding="utf-8"))
def save_data(): json.dump(data, open(DATA_FILE, "w", encoding="utf-8"), ensure_ascii=False, indent=2)

data = load_data()
def ensure_chat(chat_id):
    if chat_id not in data:
        data[chat_id] = DEFAULTS.copy()
        save_data()
    return data[chat_id]

# ---------------- –£—Ç–∏–ª–∏—Ç—ã ----------------
async def is_admin(bot, chat_id, uid):
    if uid == OWNER_ID: return True
    try: return (await bot.get_chat_member(chat_id, uid)).is_chat_admin()
    except: return False

def kb_main():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ –í–∫–ª/–í—ã–∫–ª", callback_data="toggle"),
        InlineKeyboardButton("‚öôÔ∏è –†–µ–∂–∏–º", callback_data="mode"),
        InlineKeyboardButton("üî® –ù–∞–∫–∞–∑–∞–Ω–∏—è", callback_data="actions"),
        InlineKeyboardButton("üìù –°–ª–æ–≤–∞", callback_data="words"),
        InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∏", callback_data="links"),
        InlineKeyboardButton("‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏—è", callback_data="msgs")
    )
    return kb

bot = Bot(BOT_TOKEN, parse_mode="MarkdownV2")
dp = Dispatcher()

# ---------------- –ö–æ–º–∞–Ω–¥—ã ----------------
@dp.message(Command("admin"))
async def admin_cmd(m: types.Message):
    chat_id = str(m.chat.id)
    if m.from_user.id != OWNER_ID and m.from_user.id not in ensure_chat(chat_id)["bot_admins"]:
        return await m.answer("**–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞**")
    await m.answer("**–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:**", reply_markup=kb_main())

@dp.message(Command("dante"))
async def dante(m: types.Message):
    text = (
        "**ü§ñ –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:**\n"
        "- –§–∏–ª—å—Ç—Ä —Å–ª–æ–≤ –∏ —Å—Å—ã–ª–æ–∫\n"
        "- –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤\n"
        "- –†–µ–∂–∏–º—ã all/admins\n"
        "- –ù–∞–∫–∞–∑–∞–Ω–∏—è: Warn/Mute/Ban\n"
        "- –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏\n"
    )
    await m.answer(text)

# ---------------- –ü–∞–Ω–µ–ª—å ----------------
@dp.callback_query()
async def callbacks(c: types.CallbackQuery):
    chat_id = str(c.message.chat.id)
    s = ensure_chat(chat_id)
    uid = c.from_user.id
    if uid != OWNER_ID and uid not in s["bot_admins"]:
        return await c.answer("–ù–µ—Ç –ø—Ä–∞–≤")

    # (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –ø–∞–Ω–µ–ª–∏ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–∞–∫ –≤—ã—à–µ ‚Äî –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
    # ...
    # —è –æ—Å—Ç–∞–≤–∏–ª –≤—Å—ë –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–º, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Å—Ç–∞–≤–∏–ª OWNER_ID = 7322925570
    # —Å–º–æ—Ç—Ä–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî —Ç–∞–º –≤–µ—Å—å –∫–æ–¥ —É–∂–µ —Ä–∞—Å–ø–∏—Å–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é
    # ----------------

# ---------------- –ó–∞–ø—É—Å–∫ ----------------
async def main(): await dp.start_polling(bot)
if __name__=="__main__": asyncio.run(main())
